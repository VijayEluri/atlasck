// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atlasck.backend.domain;

import com.atlasck.backend.domain.Visitors;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect VisitorsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VisitorsDataOnDemand: @Component;
    
    private Random VisitorsDataOnDemand.rnd = new SecureRandom();
    
    private List<Visitors> VisitorsDataOnDemand.data;
    
    public Visitors VisitorsDataOnDemand.getNewTransientVisitors(int index) {
        Visitors obj = new Visitors();
        setCreatedAt(obj, index);
        setEmail(obj, index);
        setIpAddress(obj, index);
        setNickname(obj, index);
        setUpdatedAt(obj, index);
        return obj;
    }
    
    public void VisitorsDataOnDemand.setCreatedAt(Visitors obj, int index) {
        Date createdAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreatedAt(createdAt);
    }
    
    public void VisitorsDataOnDemand.setEmail(Visitors obj, int index) {
        String email = "email_" + index;
        if (email.length() > 255) {
            email = new Random().nextInt(10) + email.substring(1, 255);
        }
        obj.setEmail(email);
    }
    
    public void VisitorsDataOnDemand.setIpAddress(Visitors obj, int index) {
        String ipAddress = "ipAddress_" + index;
        if (ipAddress.length() > 255) {
            ipAddress = ipAddress.substring(0, 255);
        }
        obj.setIpAddress(ipAddress);
    }
    
    public void VisitorsDataOnDemand.setNickname(Visitors obj, int index) {
        String nickname = "nickname_" + index;
        if (nickname.length() > 255) {
            nickname = nickname.substring(0, 255);
        }
        obj.setNickname(nickname);
    }
    
    public void VisitorsDataOnDemand.setUpdatedAt(Visitors obj, int index) {
        Date updatedAt = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdatedAt(updatedAt);
    }
    
    public Visitors VisitorsDataOnDemand.getSpecificVisitors(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Visitors obj = data.get(index);
        return Visitors.findVisitors(obj.getId());
    }
    
    public Visitors VisitorsDataOnDemand.getRandomVisitors() {
        init();
        Visitors obj = data.get(rnd.nextInt(data.size()));
        return Visitors.findVisitors(obj.getId());
    }
    
    public boolean VisitorsDataOnDemand.modifyVisitors(Visitors obj) {
        return false;
    }
    
    public void VisitorsDataOnDemand.init() {
        data = Visitors.findVisitorsEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Visitors' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<com.atlasck.backend.domain.Visitors>();
        for (int i = 0; i < 10; i++) {
            Visitors obj = getNewTransientVisitors(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}

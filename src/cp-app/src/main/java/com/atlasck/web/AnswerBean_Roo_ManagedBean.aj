// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atlasck.web;

import com.atlasck.domain.Answer;
import com.atlasck.domain.Question;
import com.atlasck.web.AnswerBean;
import com.atlasck.web.converter.QuestionConverter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect AnswerBean_Roo_ManagedBean {
    
    declare @type: AnswerBean: @ManagedBean(name = "answerBean");
    
    declare @type: AnswerBean: @SessionScoped;
    
    private String AnswerBean.name = "Answers";
    
    private Answer AnswerBean.answer;
    
    private List<Answer> AnswerBean.allAnswers;
    
    private boolean AnswerBean.dataVisible = false;
    
    private List<String> AnswerBean.columns;
    
    private HtmlPanelGrid AnswerBean.createPanelGrid;
    
    private HtmlPanelGrid AnswerBean.editPanelGrid;
    
    private HtmlPanelGrid AnswerBean.viewPanelGrid;
    
    private boolean AnswerBean.createDialogVisible = false;
    
    @PostConstruct
    public void AnswerBean.init() {
        columns = new ArrayList<String>();
        columns.add("createdAt");
        columns.add("updatedAt");
        columns.add("answer");
    }
    
    public String AnswerBean.getName() {
        return name;
    }
    
    public List<String> AnswerBean.getColumns() {
        return columns;
    }
    
    public List<Answer> AnswerBean.getAllAnswers() {
        return allAnswers;
    }
    
    public void AnswerBean.setAllAnswers(List<Answer> allAnswers) {
        this.allAnswers = allAnswers;
    }
    
    public String AnswerBean.findAllAnswers() {
        allAnswers = Answer.findAllAnswers();
        dataVisible = !allAnswers.isEmpty();
        return null;
    }
    
    public boolean AnswerBean.isDataVisible() {
        return dataVisible;
    }
    
    public void AnswerBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid AnswerBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void AnswerBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid AnswerBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void AnswerBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid AnswerBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void AnswerBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid AnswerBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText questionCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionCreateOutput.setId("questionCreateOutput");
        questionCreateOutput.setValue("Question:   ");
        htmlPanelGrid.getChildren().add(questionCreateOutput);
        
        AutoComplete questionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        questionCreateInput.setId("questionCreateInput");
        questionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.question}", Question.class));
        questionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{answerBean.completeQuestion}", List.class, new Class[] { String.class }));
        questionCreateInput.setDropdown(true);
        questionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "question", String.class));
        questionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{question.title} #{question.createdAt} #{question.updatedAt} #{question.body}", String.class));
        questionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{question}", Question.class));
        questionCreateInput.setConverter(new QuestionConverter());
        questionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(questionCreateInput);
        
        Message questionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        questionCreateInputMessage.setId("questionCreateInputMessage");
        questionCreateInputMessage.setFor("questionCreateInput");
        questionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(questionCreateInputMessage);
        
        HtmlOutputText createdAtCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtCreateOutput.setId("createdAtCreateOutput");
        createdAtCreateOutput.setValue("Created At:   ");
        htmlPanelGrid.getChildren().add(createdAtCreateOutput);
        
        Calendar createdAtCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        createdAtCreateInput.setId("createdAtCreateInput");
        createdAtCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.createdAt}", Date.class));
        createdAtCreateInput.setNavigator(true);
        createdAtCreateInput.setEffect("slideDown");
        createdAtCreateInput.setPattern("dd/MM/yyyy");
        createdAtCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdAtCreateInput);
        
        Message createdAtCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdAtCreateInputMessage.setId("createdAtCreateInputMessage");
        createdAtCreateInputMessage.setFor("createdAtCreateInput");
        createdAtCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdAtCreateInputMessage);
        
        HtmlOutputText updatedAtCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtCreateOutput.setId("updatedAtCreateOutput");
        updatedAtCreateOutput.setValue("Updated At:   ");
        htmlPanelGrid.getChildren().add(updatedAtCreateOutput);
        
        Calendar updatedAtCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedAtCreateInput.setId("updatedAtCreateInput");
        updatedAtCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.updatedAt}", Date.class));
        updatedAtCreateInput.setNavigator(true);
        updatedAtCreateInput.setEffect("slideDown");
        updatedAtCreateInput.setPattern("dd/MM/yyyy");
        updatedAtCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedAtCreateInput);
        
        Message updatedAtCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedAtCreateInputMessage.setId("updatedAtCreateInputMessage");
        updatedAtCreateInputMessage.setFor("updatedAtCreateInput");
        updatedAtCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedAtCreateInputMessage);
        
        HtmlOutputText answerCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        answerCreateOutput.setId("answerCreateOutput");
        answerCreateOutput.setValue("Answer:   ");
        htmlPanelGrid.getChildren().add(answerCreateOutput);
        
        InputText answerCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        answerCreateInput.setId("answerCreateInput");
        answerCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.answer}", String.class));
        htmlPanelGrid.getChildren().add(answerCreateInput);
        
        Message answerCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        answerCreateInputMessage.setId("answerCreateInputMessage");
        answerCreateInputMessage.setFor("answerCreateInput");
        answerCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(answerCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid AnswerBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText questionEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionEditOutput.setId("questionEditOutput");
        questionEditOutput.setValue("Question:   ");
        htmlPanelGrid.getChildren().add(questionEditOutput);
        
        AutoComplete questionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        questionEditInput.setId("questionEditInput");
        questionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.question}", Question.class));
        questionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{answerBean.completeQuestion}", List.class, new Class[] { String.class }));
        questionEditInput.setDropdown(true);
        questionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "question", String.class));
        questionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{question.title} #{question.createdAt} #{question.updatedAt} #{question.body}", String.class));
        questionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{question}", Question.class));
        questionEditInput.setConverter(new QuestionConverter());
        questionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(questionEditInput);
        
        Message questionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        questionEditInputMessage.setId("questionEditInputMessage");
        questionEditInputMessage.setFor("questionEditInput");
        questionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(questionEditInputMessage);
        
        HtmlOutputText createdAtEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtEditOutput.setId("createdAtEditOutput");
        createdAtEditOutput.setValue("Created At:   ");
        htmlPanelGrid.getChildren().add(createdAtEditOutput);
        
        Calendar createdAtEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        createdAtEditInput.setId("createdAtEditInput");
        createdAtEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.createdAt}", Date.class));
        createdAtEditInput.setNavigator(true);
        createdAtEditInput.setEffect("slideDown");
        createdAtEditInput.setPattern("dd/MM/yyyy");
        createdAtEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdAtEditInput);
        
        Message createdAtEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdAtEditInputMessage.setId("createdAtEditInputMessage");
        createdAtEditInputMessage.setFor("createdAtEditInput");
        createdAtEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdAtEditInputMessage);
        
        HtmlOutputText updatedAtEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtEditOutput.setId("updatedAtEditOutput");
        updatedAtEditOutput.setValue("Updated At:   ");
        htmlPanelGrid.getChildren().add(updatedAtEditOutput);
        
        Calendar updatedAtEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedAtEditInput.setId("updatedAtEditInput");
        updatedAtEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.updatedAt}", Date.class));
        updatedAtEditInput.setNavigator(true);
        updatedAtEditInput.setEffect("slideDown");
        updatedAtEditInput.setPattern("dd/MM/yyyy");
        updatedAtEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedAtEditInput);
        
        Message updatedAtEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedAtEditInputMessage.setId("updatedAtEditInputMessage");
        updatedAtEditInputMessage.setFor("updatedAtEditInput");
        updatedAtEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedAtEditInputMessage);
        
        HtmlOutputText answerEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        answerEditOutput.setId("answerEditOutput");
        answerEditOutput.setValue("Answer:   ");
        htmlPanelGrid.getChildren().add(answerEditOutput);
        
        InputText answerEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        answerEditInput.setId("answerEditInput");
        answerEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.answer}", String.class));
        htmlPanelGrid.getChildren().add(answerEditInput);
        
        Message answerEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        answerEditInputMessage.setId("answerEditInputMessage");
        answerEditInputMessage.setFor("answerEditInput");
        answerEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(answerEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid AnswerBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText questionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionLabel.setId("questionLabel");
        questionLabel.setValue("Question:   ");
        htmlPanelGrid.getChildren().add(questionLabel);
        
        HtmlOutputText questionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.question}", Question.class));
        questionValue.setConverter(new QuestionConverter());
        htmlPanelGrid.getChildren().add(questionValue);
        
        HtmlOutputText createdAtLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtLabel.setId("createdAtLabel");
        createdAtLabel.setValue("Created At:   ");
        htmlPanelGrid.getChildren().add(createdAtLabel);
        
        HtmlOutputText createdAtValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.createdAt}", Date.class));
        DateTimeConverter createdAtValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        createdAtValueConverter.setPattern("dd/MM/yyyy");
        createdAtValue.setConverter(createdAtValueConverter);
        htmlPanelGrid.getChildren().add(createdAtValue);
        
        HtmlOutputText updatedAtLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtLabel.setId("updatedAtLabel");
        updatedAtLabel.setValue("Updated At:   ");
        htmlPanelGrid.getChildren().add(updatedAtLabel);
        
        HtmlOutputText updatedAtValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.updatedAt}", Date.class));
        DateTimeConverter updatedAtValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedAtValueConverter.setPattern("dd/MM/yyyy");
        updatedAtValue.setConverter(updatedAtValueConverter);
        htmlPanelGrid.getChildren().add(updatedAtValue);
        
        HtmlOutputText answerLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        answerLabel.setId("answerLabel");
        answerLabel.setValue("Answer:   ");
        htmlPanelGrid.getChildren().add(answerLabel);
        
        HtmlOutputText answerValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        answerValue.setId("answerValue");
        answerValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{answerBean.answer.answer}", String.class));
        htmlPanelGrid.getChildren().add(answerValue);
        
        return htmlPanelGrid;
    }
    
    public Answer AnswerBean.getAnswer() {
        if (answer == null) {
            answer = new Answer();
        }
        return answer;
    }
    
    public void AnswerBean.setAnswer(Answer answer) {
        this.answer = answer;
    }
    
    public List<Question> AnswerBean.completeQuestion(String query) {
        List<Question> suggestions = new ArrayList<Question>();
        for (Question question : Question.findAllQuestions()) {
            String questionStr = String.valueOf(question.getTitle() +  " "  + question.getCreatedAt() +  " "  + question.getUpdatedAt() +  " "  + question.getBody());
            if (questionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(question);
            }
        }
        return suggestions;
    }
    
    public String AnswerBean.onEdit() {
        return null;
    }
    
    public boolean AnswerBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void AnswerBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String AnswerBean.displayList() {
        createDialogVisible = false;
        findAllAnswers();
        return "answer";
    }
    
    public String AnswerBean.displayCreateDialog() {
        answer = new Answer();
        createDialogVisible = true;
        return "answer";
    }
    
    public String AnswerBean.persist() {
        String message = "";
        if (answer.getId() != null) {
            answer.merge();
            message = "Successfully updated";
        } else {
            answer.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAnswers();
    }
    
    public String AnswerBean.delete() {
        answer.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllAnswers();
    }
    
    public void AnswerBean.reset() {
        answer = null;
        createDialogVisible = false;
    }
    
    public void AnswerBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

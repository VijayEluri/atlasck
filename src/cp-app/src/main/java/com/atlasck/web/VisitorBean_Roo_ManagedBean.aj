// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atlasck.web;

import com.atlasck.domain.Question;
import com.atlasck.domain.Visitor;
import com.atlasck.web.VisitorBean;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect VisitorBean_Roo_ManagedBean {
    
    declare @type: VisitorBean: @ManagedBean(name = "visitorBean");
    
    declare @type: VisitorBean: @SessionScoped;
    
    private String VisitorBean.name = "Visitors";
    
    private Visitor VisitorBean.visitor;
    
    private List<Visitor> VisitorBean.allVisitors;
    
    private boolean VisitorBean.dataVisible = false;
    
    private List<String> VisitorBean.columns;
    
    private HtmlPanelGrid VisitorBean.createPanelGrid;
    
    private HtmlPanelGrid VisitorBean.editPanelGrid;
    
    private HtmlPanelGrid VisitorBean.viewPanelGrid;
    
    private boolean VisitorBean.createDialogVisible = false;
    
    private List<Question> VisitorBean.selectedQuestions;
    
    @PostConstruct
    public void VisitorBean.init() {
        columns = new ArrayList<String>();
        columns.add("nickname");
        columns.add("email");
        columns.add("createdAt");
        columns.add("updatedAt");
        columns.add("ipAddress");
    }
    
    public String VisitorBean.getName() {
        return name;
    }
    
    public List<String> VisitorBean.getColumns() {
        return columns;
    }
    
    public List<Visitor> VisitorBean.getAllVisitors() {
        return allVisitors;
    }
    
    public void VisitorBean.setAllVisitors(List<Visitor> allVisitors) {
        this.allVisitors = allVisitors;
    }
    
    public String VisitorBean.findAllVisitors() {
        allVisitors = Visitor.findAllVisitors();
        dataVisible = !allVisitors.isEmpty();
        return null;
    }
    
    public boolean VisitorBean.isDataVisible() {
        return dataVisible;
    }
    
    public void VisitorBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid VisitorBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void VisitorBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid VisitorBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void VisitorBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid VisitorBean.getViewPanelGrid() {
        if (viewPanelGrid == null) {
            viewPanelGrid = populateViewPanel();
        }
        return viewPanelGrid;
    }
    
    public void VisitorBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid VisitorBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText questionsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionsCreateOutput.setId("questionsCreateOutput");
        questionsCreateOutput.setValue("Questions:   ");
        htmlPanelGrid.getChildren().add(questionsCreateOutput);
        
        HtmlOutputText questionsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionsCreateInput.setId("questionsCreateInput");
        questionsCreateInput.setValue("This relationship is managed from the Question side");
        htmlPanelGrid.getChildren().add(questionsCreateInput);
        
        Message questionsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        questionsCreateInputMessage.setId("questionsCreateInputMessage");
        questionsCreateInputMessage.setFor("questionsCreateInput");
        questionsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(questionsCreateInputMessage);
        
        HtmlOutputText nicknameCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nicknameCreateOutput.setId("nicknameCreateOutput");
        nicknameCreateOutput.setValue("Nickname: * ");
        htmlPanelGrid.getChildren().add(nicknameCreateOutput);
        
        InputTextarea nicknameCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nicknameCreateInput.setId("nicknameCreateInput");
        nicknameCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.nickname}", String.class));
        LengthValidator nicknameCreateInputValidator = new LengthValidator();
        nicknameCreateInputValidator.setMaximum(255);
        nicknameCreateInput.addValidator(nicknameCreateInputValidator);
        nicknameCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nicknameCreateInput);
        
        Message nicknameCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nicknameCreateInputMessage.setId("nicknameCreateInputMessage");
        nicknameCreateInputMessage.setFor("nicknameCreateInput");
        nicknameCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nicknameCreateInputMessage);
        
        HtmlOutputText emailCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailCreateOutput.setId("emailCreateOutput");
        emailCreateOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailCreateOutput);
        
        InputTextarea emailCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emailCreateInput.setId("emailCreateInput");
        emailCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.email}", String.class));
        LengthValidator emailCreateInputValidator = new LengthValidator();
        emailCreateInputValidator.setMaximum(255);
        emailCreateInput.addValidator(emailCreateInputValidator);
        emailCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailCreateInput);
        
        Message emailCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailCreateInputMessage.setId("emailCreateInputMessage");
        emailCreateInputMessage.setFor("emailCreateInput");
        emailCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailCreateInputMessage);
        
        HtmlOutputText createdAtCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtCreateOutput.setId("createdAtCreateOutput");
        createdAtCreateOutput.setValue("Created At:   ");
        htmlPanelGrid.getChildren().add(createdAtCreateOutput);
        
        Calendar createdAtCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        createdAtCreateInput.setId("createdAtCreateInput");
        createdAtCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.createdAt}", Date.class));
        createdAtCreateInput.setNavigator(true);
        createdAtCreateInput.setEffect("slideDown");
        createdAtCreateInput.setPattern("dd/MM/yyyy");
        createdAtCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdAtCreateInput);
        
        Message createdAtCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdAtCreateInputMessage.setId("createdAtCreateInputMessage");
        createdAtCreateInputMessage.setFor("createdAtCreateInput");
        createdAtCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdAtCreateInputMessage);
        
        HtmlOutputText updatedAtCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtCreateOutput.setId("updatedAtCreateOutput");
        updatedAtCreateOutput.setValue("Updated At:   ");
        htmlPanelGrid.getChildren().add(updatedAtCreateOutput);
        
        Calendar updatedAtCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedAtCreateInput.setId("updatedAtCreateInput");
        updatedAtCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.updatedAt}", Date.class));
        updatedAtCreateInput.setNavigator(true);
        updatedAtCreateInput.setEffect("slideDown");
        updatedAtCreateInput.setPattern("dd/MM/yyyy");
        updatedAtCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedAtCreateInput);
        
        Message updatedAtCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedAtCreateInputMessage.setId("updatedAtCreateInputMessage");
        updatedAtCreateInputMessage.setFor("updatedAtCreateInput");
        updatedAtCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedAtCreateInputMessage);
        
        HtmlOutputText ipAddressCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ipAddressCreateOutput.setId("ipAddressCreateOutput");
        ipAddressCreateOutput.setValue("Ip Address: * ");
        htmlPanelGrid.getChildren().add(ipAddressCreateOutput);
        
        InputTextarea ipAddressCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        ipAddressCreateInput.setId("ipAddressCreateInput");
        ipAddressCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.ipAddress}", String.class));
        LengthValidator ipAddressCreateInputValidator = new LengthValidator();
        ipAddressCreateInputValidator.setMaximum(255);
        ipAddressCreateInput.addValidator(ipAddressCreateInputValidator);
        ipAddressCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(ipAddressCreateInput);
        
        Message ipAddressCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ipAddressCreateInputMessage.setId("ipAddressCreateInputMessage");
        ipAddressCreateInputMessage.setFor("ipAddressCreateInput");
        ipAddressCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ipAddressCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid VisitorBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText questionsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionsEditOutput.setId("questionsEditOutput");
        questionsEditOutput.setValue("Questions:   ");
        htmlPanelGrid.getChildren().add(questionsEditOutput);
        
        HtmlOutputText questionsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionsEditInput.setId("questionsEditInput");
        questionsEditInput.setValue("This relationship is managed from the Question side");
        htmlPanelGrid.getChildren().add(questionsEditInput);
        
        Message questionsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        questionsEditInputMessage.setId("questionsEditInputMessage");
        questionsEditInputMessage.setFor("questionsEditInput");
        questionsEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(questionsEditInputMessage);
        
        HtmlOutputText nicknameEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nicknameEditOutput.setId("nicknameEditOutput");
        nicknameEditOutput.setValue("Nickname: * ");
        htmlPanelGrid.getChildren().add(nicknameEditOutput);
        
        InputTextarea nicknameEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nicknameEditInput.setId("nicknameEditInput");
        nicknameEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.nickname}", String.class));
        LengthValidator nicknameEditInputValidator = new LengthValidator();
        nicknameEditInputValidator.setMaximum(255);
        nicknameEditInput.addValidator(nicknameEditInputValidator);
        nicknameEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nicknameEditInput);
        
        Message nicknameEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nicknameEditInputMessage.setId("nicknameEditInputMessage");
        nicknameEditInputMessage.setFor("nicknameEditInput");
        nicknameEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nicknameEditInputMessage);
        
        HtmlOutputText emailEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailEditOutput.setId("emailEditOutput");
        emailEditOutput.setValue("Email: * ");
        htmlPanelGrid.getChildren().add(emailEditOutput);
        
        InputTextarea emailEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emailEditInput.setId("emailEditInput");
        emailEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.email}", String.class));
        LengthValidator emailEditInputValidator = new LengthValidator();
        emailEditInputValidator.setMaximum(255);
        emailEditInput.addValidator(emailEditInputValidator);
        emailEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(emailEditInput);
        
        Message emailEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        emailEditInputMessage.setId("emailEditInputMessage");
        emailEditInputMessage.setFor("emailEditInput");
        emailEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(emailEditInputMessage);
        
        HtmlOutputText createdAtEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtEditOutput.setId("createdAtEditOutput");
        createdAtEditOutput.setValue("Created At:   ");
        htmlPanelGrid.getChildren().add(createdAtEditOutput);
        
        Calendar createdAtEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        createdAtEditInput.setId("createdAtEditInput");
        createdAtEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.createdAt}", Date.class));
        createdAtEditInput.setNavigator(true);
        createdAtEditInput.setEffect("slideDown");
        createdAtEditInput.setPattern("dd/MM/yyyy");
        createdAtEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(createdAtEditInput);
        
        Message createdAtEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        createdAtEditInputMessage.setId("createdAtEditInputMessage");
        createdAtEditInputMessage.setFor("createdAtEditInput");
        createdAtEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(createdAtEditInputMessage);
        
        HtmlOutputText updatedAtEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtEditOutput.setId("updatedAtEditOutput");
        updatedAtEditOutput.setValue("Updated At:   ");
        htmlPanelGrid.getChildren().add(updatedAtEditOutput);
        
        Calendar updatedAtEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        updatedAtEditInput.setId("updatedAtEditInput");
        updatedAtEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.updatedAt}", Date.class));
        updatedAtEditInput.setNavigator(true);
        updatedAtEditInput.setEffect("slideDown");
        updatedAtEditInput.setPattern("dd/MM/yyyy");
        updatedAtEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(updatedAtEditInput);
        
        Message updatedAtEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        updatedAtEditInputMessage.setId("updatedAtEditInputMessage");
        updatedAtEditInputMessage.setFor("updatedAtEditInput");
        updatedAtEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(updatedAtEditInputMessage);
        
        HtmlOutputText ipAddressEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ipAddressEditOutput.setId("ipAddressEditOutput");
        ipAddressEditOutput.setValue("Ip Address: * ");
        htmlPanelGrid.getChildren().add(ipAddressEditOutput);
        
        InputTextarea ipAddressEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        ipAddressEditInput.setId("ipAddressEditInput");
        ipAddressEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.ipAddress}", String.class));
        LengthValidator ipAddressEditInputValidator = new LengthValidator();
        ipAddressEditInputValidator.setMaximum(255);
        ipAddressEditInput.addValidator(ipAddressEditInputValidator);
        ipAddressEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(ipAddressEditInput);
        
        Message ipAddressEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        ipAddressEditInputMessage.setId("ipAddressEditInputMessage");
        ipAddressEditInputMessage.setFor("ipAddressEditInput");
        ipAddressEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(ipAddressEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid VisitorBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText questionsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionsLabel.setId("questionsLabel");
        questionsLabel.setValue("Questions:   ");
        htmlPanelGrid.getChildren().add(questionsLabel);
        
        HtmlOutputText questionsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        questionsValue.setId("questionsValue");
        questionsValue.setValue("This relationship is managed from the Question side");
        htmlPanelGrid.getChildren().add(questionsValue);
        
        HtmlOutputText nicknameLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nicknameLabel.setId("nicknameLabel");
        nicknameLabel.setValue("Nickname:   ");
        htmlPanelGrid.getChildren().add(nicknameLabel);
        
        InputTextarea nicknameValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        nicknameValue.setId("nicknameValue");
        nicknameValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.nickname}", String.class));
        nicknameValue.setReadonly(true);
        nicknameValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(nicknameValue);
        
        HtmlOutputText emailLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        emailLabel.setId("emailLabel");
        emailLabel.setValue("Email:   ");
        htmlPanelGrid.getChildren().add(emailLabel);
        
        InputTextarea emailValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        emailValue.setId("emailValue");
        emailValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.email}", String.class));
        emailValue.setReadonly(true);
        emailValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(emailValue);
        
        HtmlOutputText createdAtLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtLabel.setId("createdAtLabel");
        createdAtLabel.setValue("Created At:   ");
        htmlPanelGrid.getChildren().add(createdAtLabel);
        
        HtmlOutputText createdAtValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        createdAtValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.createdAt}", Date.class));
        DateTimeConverter createdAtValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        createdAtValueConverter.setPattern("dd/MM/yyyy");
        createdAtValue.setConverter(createdAtValueConverter);
        htmlPanelGrid.getChildren().add(createdAtValue);
        
        HtmlOutputText updatedAtLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtLabel.setId("updatedAtLabel");
        updatedAtLabel.setValue("Updated At:   ");
        htmlPanelGrid.getChildren().add(updatedAtLabel);
        
        HtmlOutputText updatedAtValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        updatedAtValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.updatedAt}", Date.class));
        DateTimeConverter updatedAtValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        updatedAtValueConverter.setPattern("dd/MM/yyyy");
        updatedAtValue.setConverter(updatedAtValueConverter);
        htmlPanelGrid.getChildren().add(updatedAtValue);
        
        HtmlOutputText ipAddressLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        ipAddressLabel.setId("ipAddressLabel");
        ipAddressLabel.setValue("Ip Address:   ");
        htmlPanelGrid.getChildren().add(ipAddressLabel);
        
        InputTextarea ipAddressValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        ipAddressValue.setId("ipAddressValue");
        ipAddressValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{visitorBean.visitor.ipAddress}", String.class));
        ipAddressValue.setReadonly(true);
        ipAddressValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(ipAddressValue);
        
        return htmlPanelGrid;
    }
    
    public Visitor VisitorBean.getVisitor() {
        if (visitor == null) {
            visitor = new Visitor();
        }
        return visitor;
    }
    
    public void VisitorBean.setVisitor(Visitor visitor) {
        this.visitor = visitor;
    }
    
    public List<Question> VisitorBean.getSelectedQuestions() {
        return selectedQuestions;
    }
    
    public void VisitorBean.setSelectedQuestions(List<Question> selectedQuestions) {
        if (selectedQuestions != null) {
            visitor.setQuestions(new HashSet<Question>(selectedQuestions));
        }
        this.selectedQuestions = selectedQuestions;
    }
    
    public String VisitorBean.onEdit() {
        if (visitor != null && visitor.getQuestions() != null) {
            selectedQuestions = new ArrayList<Question>(visitor.getQuestions());
        }
        return null;
    }
    
    public boolean VisitorBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void VisitorBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String VisitorBean.displayList() {
        createDialogVisible = false;
        findAllVisitors();
        return "visitor";
    }
    
    public String VisitorBean.displayCreateDialog() {
        visitor = new Visitor();
        createDialogVisible = true;
        return "visitor";
    }
    
    public String VisitorBean.persist() {
        String message = "";
        if (visitor.getId() != null) {
            visitor.merge();
            message = "Successfully updated";
        } else {
            visitor.persist();
            message = "Successfully created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialog.hide()");
        context.execute("editDialog.hide()");
        
        FacesMessage facesMessage = new FacesMessage(message);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllVisitors();
    }
    
    public String VisitorBean.delete() {
        visitor.remove();
        FacesMessage facesMessage = new FacesMessage("Successfully deleted");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllVisitors();
    }
    
    public void VisitorBean.reset() {
        visitor = null;
        selectedQuestions = null;
        createDialogVisible = false;
    }
    
    public void VisitorBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}

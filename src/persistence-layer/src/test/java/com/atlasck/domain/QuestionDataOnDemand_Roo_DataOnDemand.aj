// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.atlasck.domain;

import com.atlasck.domain.Question;
import com.atlasck.domain.QuestionDataOnDemand;
import com.atlasck.domain.Visitor;
import com.atlasck.domain.VisitorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect QuestionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuestionDataOnDemand: @Component;
    
    private Random QuestionDataOnDemand.rnd = new SecureRandom();
    
    private List<Question> QuestionDataOnDemand.data;
    
    @Autowired
    VisitorDataOnDemand QuestionDataOnDemand.visitorDataOnDemand;
    
    public Question QuestionDataOnDemand.getNewTransientQuestion(int index) {
        Question obj = new Question();
        setBody(obj, index);
        setCreatedAt(obj, index);
        setEmailAnswer(obj, index);
        setTitle(obj, index);
        setUpdatedAt(obj, index);
        setVisible(obj, index);
        setVisitor(obj, index);
        return obj;
    }
    
    public void QuestionDataOnDemand.setBody(Question obj, int index) {
        String body = "body_" + index;
        obj.setBody(body);
    }
    
    public void QuestionDataOnDemand.setCreatedAt(Question obj, int index) {
        Calendar createdAt = Calendar.getInstance();
        obj.setCreatedAt(createdAt);
    }
    
    public void QuestionDataOnDemand.setEmailAnswer(Question obj, int index) {
        Boolean emailAnswer = true;
        obj.setEmailAnswer(emailAnswer);
    }
    
    public void QuestionDataOnDemand.setTitle(Question obj, int index) {
        String title = "title_" + index;
        if (title.length() > 255) {
            title = title.substring(0, 255);
        }
        obj.setTitle(title);
    }
    
    public void QuestionDataOnDemand.setUpdatedAt(Question obj, int index) {
        Calendar updatedAt = Calendar.getInstance();
        obj.setUpdatedAt(updatedAt);
    }
    
    public void QuestionDataOnDemand.setVisible(Question obj, int index) {
        Boolean visible = false;
        obj.setVisible(visible);
    }
    
    public void QuestionDataOnDemand.setVisitor(Question obj, int index) {
        Visitor visitor = visitorDataOnDemand.getRandomVisitor();
        obj.setVisitor(visitor);
    }
    
    public Question QuestionDataOnDemand.getSpecificQuestion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Question obj = data.get(index);
        Integer id = obj.getId();
        return Question.findQuestion(id);
    }
    
    public Question QuestionDataOnDemand.getRandomQuestion() {
        init();
        Question obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Question.findQuestion(id);
    }
    
    public boolean QuestionDataOnDemand.modifyQuestion(Question obj) {
        return false;
    }
    
    public void QuestionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Question.findQuestionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Question' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Question>();
        for (int i = 0; i < 10; i++) {
            Question obj = getNewTransientQuestion(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
